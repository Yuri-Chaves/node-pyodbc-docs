"use strict";(self.webpackChunknode_pyodbc=self.webpackChunknode_pyodbc||[]).push([[785],{862:(e,n,t)=>{t.d(n,{Mb:()=>a,Tr:()=>l,ap:()=>c,k7:()=>r,lI:()=>d});var s=t(1312),i=t(4848);const r=({children:e})=>(0,i.jsxs)("span",{children:[(0,i.jsx)("span",{style:{color:"#ff79c6"},children:"keyof"})," ",(0,i.jsx)("span",{style:{color:"#8ae9fd"},children:e})]}),d=({children:e})=>(0,i.jsxs)("span",{children:[(0,i.jsx)("span",{style:{color:"#8ae9fd"},children:"Array"}),"<",e,">"]}),a=({children:e})=>(0,i.jsx)("span",{style:{color:"#8ae9fd"},children:e}),l=({children:e})=>(0,i.jsxs)("span",{children:[e,(0,i.jsx)("span",{className:"required-indicator",children:(0,i.jsx)(s.A,{id:"requiredIndicator",description:"Indicate that a field is required",children:"required"})})]}),c=({children:e})=>(0,i.jsx)("span",{className:"highlight",children:e})},8306:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"dml/insert","title":"Insert","description":"The insert function allows you to execute an INSERT statement and return an object containing the status of the operation, a message and some details.","source":"@site/docs/dml/insert.mdx","sourceDirName":"dml","slug":"/dml/insert","permalink":"/node-pyodbc-docs/docs/dml/insert","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"id":"insert"},"sidebar":"tutorialSidebar","previous":{"title":"Select","permalink":"/node-pyodbc-docs/docs/dml/select"},"next":{"title":"Delete","permalink":"/node-pyodbc-docs/docs/dml/delete"}}');var i=t(4848),r=t(8453),d=t(862);const a={sidebar_position:2,id:"insert"},l="Insert",c={},o=[{value:"Example",id:"example",level:2},{value:"Parameters",id:"parameters",level:2},{value:"database",id:"database",level:3},{value:"<RequiredIndicator>table</RequiredIndicator>",id:"table",level:3},{value:"<RequiredIndicator>data</RequiredIndicator>",id:"data",level:3},{value:"replace",id:"replace",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"insert",children:"Insert"})}),"\n",(0,i.jsx)(n.p,{children:"The insert function allows you to execute an INSERT statement and return an object containing the status of the operation, a message and some details."}),"\n",(0,i.jsx)(n.p,{children:"The function accepts the main table type"}),"\n",(0,i.jsx)(n.admonition,{title:"Inserting multiple rows",type:"tip",children:(0,i.jsxs)(n.p,{children:["If you want to insert multiple rows, please use the ",(0,i.jsx)(n.a,{href:"./insertMultiple",children:"insertMultiple"})," function instead."]})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { odbc } from "./odbc";\nimport { TUsers } from "./types";\n\nconst insert = await odbc.insert<TUsers>({\n  table: "users",\n  data: {\n    name: "Billy Nobody",\n    email: "billy.nobody@gmail.com",\n    age: 19,\n  },\n});\n\nconsole.log(insert);\n/*\n{\n  code: SUCCESS,\n  message: "Successfully executed query: INSERT INTO users(name, email, age) VALUES (\'Billy Nobody\', \'billy.nobody@gmail.com\', 19);",\n  details: "1  row(s) affected",\n}\n*/\n'})}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(n.h3,{id:"database",children:"database"}),"\n",(0,i.jsx)(n.p,{children:"The name of the database to be used. If you have set the same database in the explicit config object, you can omit this parameter."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Client database"})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"table",children:(0,i.jsx)(d.Tr,{children:"table"})}),"\n",(0,i.jsx)(n.p,{children:"The name of the table to be inserted."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:"Type"})})}),(0,i.jsx)(n.tbody,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:"string"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"data",children:(0,i.jsx)(d.Tr,{children:"data"})}),"\n",(0,i.jsx)(n.p,{children:"The data to be inserted. If a type is provided, IntelliSense will provide suggestions with the column names."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.th,{children:"Type"})})}),(0,i.jsx)(n.tbody,{children:(0,i.jsx)(n.tr,{children:(0,i.jsx)(n.td,{children:(0,i.jsx)(d.Mb,{children:"Object"})})})})]}),"\n",(0,i.jsx)(n.h3,{id:"replace",children:"replace"}),"\n",(0,i.jsx)(n.p,{children:"A boolean value that indicates whether the existing data in the table should be replaced."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"false"})]})})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);